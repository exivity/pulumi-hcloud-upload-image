// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.hclouduploadimage.hclouduploadimage.hcloudimages;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UploadedImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final UploadedImageArgs Empty = new UploadedImageArgs();

    /**
     * The architecture of the image. Supported: &#39;x86&#39;, &#39;arm&#39;.
     * 
     */
    @Import(name="architecture", required=true)
    private Output<String> architecture;

    /**
     * @return The architecture of the image. Supported: &#39;x86&#39;, &#39;arm&#39;.
     * 
     */
    public Output<String> architecture() {
        return this.architecture;
    }

    /**
     * Optional description for the resulting image.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional description for the resulting image.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The compression format of the image. Supported: &#39;none&#39;, &#39;bz2&#39;, &#39;xz&#39;. Defaults to &#39;none&#39;.
     * 
     */
    @Import(name="imageCompression")
    private @Nullable Output<String> imageCompression;

    /**
     * @return The compression format of the image. Supported: &#39;none&#39;, &#39;bz2&#39;, &#39;xz&#39;. Defaults to &#39;none&#39;.
     * 
     */
    public Optional<Output<String>> imageCompression() {
        return Optional.ofNullable(this.imageCompression);
    }

    /**
     * The format of the image. Supported: &#39;raw&#39;, &#39;qcow2&#39;. Defaults to &#39;raw&#39;.
     * 
     */
    @Import(name="imageFormat")
    private @Nullable Output<String> imageFormat;

    /**
     * @return The format of the image. Supported: &#39;raw&#39;, &#39;qcow2&#39;. Defaults to &#39;raw&#39;.
     * 
     */
    public Optional<Output<String>> imageFormat() {
        return Optional.ofNullable(this.imageFormat);
    }

    /**
     * Optional size validation for the image in bytes.
     * 
     */
    @Import(name="imageSize")
    private @Nullable Output<Integer> imageSize;

    /**
     * @return Optional size validation for the image in bytes.
     * 
     */
    public Optional<Output<Integer>> imageSize() {
        return Optional.ofNullable(this.imageSize);
    }

    /**
     * The URL to download the image from. Must be publicly accessible.
     * 
     */
    @Import(name="imageUrl")
    private @Nullable Output<String> imageUrl;

    /**
     * @return The URL to download the image from. Must be publicly accessible.
     * 
     */
    public Optional<Output<String>> imageUrl() {
        return Optional.ofNullable(this.imageUrl);
    }

    /**
     * Labels to add to the resulting image. These can be used to filter images later.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels to add to the resulting image. These can be used to filter images later.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
     * 
     */
    @Import(name="serverType")
    private @Nullable Output<String> serverType;

    /**
     * @return Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
     * 
     */
    public Optional<Output<String>> serverType() {
        return Optional.ofNullable(this.serverType);
    }

    private UploadedImageArgs() {}

    private UploadedImageArgs(UploadedImageArgs $) {
        this.architecture = $.architecture;
        this.description = $.description;
        this.imageCompression = $.imageCompression;
        this.imageFormat = $.imageFormat;
        this.imageSize = $.imageSize;
        this.imageUrl = $.imageUrl;
        this.labels = $.labels;
        this.serverType = $.serverType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UploadedImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UploadedImageArgs $;

        public Builder() {
            $ = new UploadedImageArgs();
        }

        public Builder(UploadedImageArgs defaults) {
            $ = new UploadedImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The architecture of the image. Supported: &#39;x86&#39;, &#39;arm&#39;.
         * 
         * @return builder
         * 
         */
        public Builder architecture(Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The architecture of the image. Supported: &#39;x86&#39;, &#39;arm&#39;.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param description Optional description for the resulting image.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional description for the resulting image.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param imageCompression The compression format of the image. Supported: &#39;none&#39;, &#39;bz2&#39;, &#39;xz&#39;. Defaults to &#39;none&#39;.
         * 
         * @return builder
         * 
         */
        public Builder imageCompression(@Nullable Output<String> imageCompression) {
            $.imageCompression = imageCompression;
            return this;
        }

        /**
         * @param imageCompression The compression format of the image. Supported: &#39;none&#39;, &#39;bz2&#39;, &#39;xz&#39;. Defaults to &#39;none&#39;.
         * 
         * @return builder
         * 
         */
        public Builder imageCompression(String imageCompression) {
            return imageCompression(Output.of(imageCompression));
        }

        /**
         * @param imageFormat The format of the image. Supported: &#39;raw&#39;, &#39;qcow2&#39;. Defaults to &#39;raw&#39;.
         * 
         * @return builder
         * 
         */
        public Builder imageFormat(@Nullable Output<String> imageFormat) {
            $.imageFormat = imageFormat;
            return this;
        }

        /**
         * @param imageFormat The format of the image. Supported: &#39;raw&#39;, &#39;qcow2&#39;. Defaults to &#39;raw&#39;.
         * 
         * @return builder
         * 
         */
        public Builder imageFormat(String imageFormat) {
            return imageFormat(Output.of(imageFormat));
        }

        /**
         * @param imageSize Optional size validation for the image in bytes.
         * 
         * @return builder
         * 
         */
        public Builder imageSize(@Nullable Output<Integer> imageSize) {
            $.imageSize = imageSize;
            return this;
        }

        /**
         * @param imageSize Optional size validation for the image in bytes.
         * 
         * @return builder
         * 
         */
        public Builder imageSize(Integer imageSize) {
            return imageSize(Output.of(imageSize));
        }

        /**
         * @param imageUrl The URL to download the image from. Must be publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(@Nullable Output<String> imageUrl) {
            $.imageUrl = imageUrl;
            return this;
        }

        /**
         * @param imageUrl The URL to download the image from. Must be publicly accessible.
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(String imageUrl) {
            return imageUrl(Output.of(imageUrl));
        }

        /**
         * @param labels Labels to add to the resulting image. These can be used to filter images later.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels to add to the resulting image. These can be used to filter images later.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param serverType Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
         * 
         * @return builder
         * 
         */
        public Builder serverType(@Nullable Output<String> serverType) {
            $.serverType = serverType;
            return this;
        }

        /**
         * @param serverType Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
         * 
         * @return builder
         * 
         */
        public Builder serverType(String serverType) {
            return serverType(Output.of(serverType));
        }

        public UploadedImageArgs build() {
            if ($.architecture == null) {
                throw new MissingRequiredPropertyException("UploadedImageArgs", "architecture");
            }
            $.imageCompression = Codegen.stringProp("imageCompression").output().arg($.imageCompression).def("none").getNullable();
            $.imageFormat = Codegen.stringProp("imageFormat").output().arg($.imageFormat).def("raw").getNullable();
            return $;
        }
    }

}
