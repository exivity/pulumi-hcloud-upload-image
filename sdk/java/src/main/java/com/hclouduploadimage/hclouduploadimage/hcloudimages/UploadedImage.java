// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.hclouduploadimage.hclouduploadimage.hcloudimages;

import com.hclouduploadimage.hclouduploadimage.Utilities;
import com.hclouduploadimage.hclouduploadimage.hcloudimages.UploadedImageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Uploads a custom disk image to Hetzner Cloud and creates a snapshot that can be used to create servers.
 * 
 */
@ResourceType(type="hcloud-upload-image:hcloudimages:UploadedImage")
public class UploadedImage extends com.pulumi.resources.CustomResource {
    /**
     * The architecture of the image. Supported: &#39;x86&#39;, &#39;arm&#39;.
     * 
     */
    @Export(name="architecture", refs={String.class}, tree="[0]")
    private Output<String> architecture;

    /**
     * @return The architecture of the image. Supported: &#39;x86&#39;, &#39;arm&#39;.
     * 
     */
    public Output<String> architecture() {
        return this.architecture;
    }
    /**
     * The creation timestamp of the image.
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return The creation timestamp of the image.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Optional description for the resulting image.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Optional description for the resulting image.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The disk size of the image in GB.
     * 
     */
    @Export(name="diskSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> diskSize;

    /**
     * @return The disk size of the image in GB.
     * 
     */
    public Output<Integer> diskSize() {
        return this.diskSize;
    }
    /**
     * The Hetzner Cloud API token.
     * 
     */
    @Export(name="hcloudToken", refs={String.class}, tree="[0]")
    private Output<String> hcloudToken;

    /**
     * @return The Hetzner Cloud API token.
     * 
     */
    public Output<String> hcloudToken() {
        return this.hcloudToken;
    }
    /**
     * The compression format of the image. Supported: &#39;none&#39;, &#39;bz2&#39;, &#39;xz&#39;. Defaults to &#39;none&#39;.
     * 
     */
    @Export(name="imageCompression", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imageCompression;

    /**
     * @return The compression format of the image. Supported: &#39;none&#39;, &#39;bz2&#39;, &#39;xz&#39;. Defaults to &#39;none&#39;.
     * 
     */
    public Output<Optional<String>> imageCompression() {
        return Codegen.optional(this.imageCompression);
    }
    /**
     * The format of the image. Supported: &#39;raw&#39;, &#39;qcow2&#39;. Defaults to &#39;raw&#39;.
     * 
     */
    @Export(name="imageFormat", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imageFormat;

    /**
     * @return The format of the image. Supported: &#39;raw&#39;, &#39;qcow2&#39;. Defaults to &#39;raw&#39;.
     * 
     */
    public Output<Optional<String>> imageFormat() {
        return Codegen.optional(this.imageFormat);
    }
    /**
     * The ID of the created Hetzner Cloud image.
     * 
     */
    @Export(name="imageId", refs={Integer.class}, tree="[0]")
    private Output<Integer> imageId;

    /**
     * @return The ID of the created Hetzner Cloud image.
     * 
     */
    public Output<Integer> imageId() {
        return this.imageId;
    }
    /**
     * The name of the created image.
     * 
     */
    @Export(name="imageName", refs={String.class}, tree="[0]")
    private Output<String> imageName;

    /**
     * @return The name of the created image.
     * 
     */
    public Output<String> imageName() {
        return this.imageName;
    }
    /**
     * Optional size validation for the image in bytes.
     * 
     */
    @Export(name="imageSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> imageSize;

    /**
     * @return Optional size validation for the image in bytes.
     * 
     */
    public Output<Optional<Integer>> imageSize() {
        return Codegen.optional(this.imageSize);
    }
    /**
     * The URL to download the image from. Must be publicly accessible.
     * 
     */
    @Export(name="imageUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> imageUrl;

    /**
     * @return The URL to download the image from. Must be publicly accessible.
     * 
     */
    public Output<Optional<String>> imageUrl() {
        return Codegen.optional(this.imageUrl);
    }
    /**
     * Labels to add to the resulting image. These can be used to filter images later.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels to add to the resulting image. These can be used to filter images later.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The OS flavor of the image.
     * 
     */
    @Export(name="osFlavor", refs={String.class}, tree="[0]")
    private Output<String> osFlavor;

    /**
     * @return The OS flavor of the image.
     * 
     */
    public Output<String> osFlavor() {
        return this.osFlavor;
    }
    /**
     * The OS version of the image.
     * 
     */
    @Export(name="osVersion", refs={String.class}, tree="[0]")
    private Output<String> osVersion;

    /**
     * @return The OS version of the image.
     * 
     */
    public Output<String> osVersion() {
        return this.osVersion;
    }
    /**
     * Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
     * 
     */
    @Export(name="serverType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serverType;

    /**
     * @return Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
     * 
     */
    public Output<Optional<String>> serverType() {
        return Codegen.optional(this.serverType);
    }
    /**
     * The current status of the image.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The current status of the image.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The type of the image.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of the image.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public UploadedImage(java.lang.String name) {
        this(name, UploadedImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public UploadedImage(java.lang.String name, UploadedImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public UploadedImage(java.lang.String name, UploadedImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("hcloud-upload-image:hcloudimages:UploadedImage", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private UploadedImage(java.lang.String name, Output<java.lang.String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("hcloud-upload-image:hcloudimages:UploadedImage", name, null, makeResourceOptions(options, id), false);
    }

    private static UploadedImageArgs makeArgs(UploadedImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? UploadedImageArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/exivity")
            .additionalSecretOutputs(List.of(
                "hcloudToken"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static UploadedImage get(java.lang.String name, Output<java.lang.String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new UploadedImage(name, id, options);
    }
}
