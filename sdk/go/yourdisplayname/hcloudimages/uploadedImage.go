// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloudimages

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/yournamespace/yourdisplayname/sdk/go/yourdisplayname/internal"
)

// Uploads a custom disk image to Hetzner Cloud and creates a snapshot that can be used to create servers.
type UploadedImage struct {
	pulumi.CustomResourceState

	// The architecture of the image. Supported: 'x86', 'arm'.
	Architecture pulumi.StringOutput `pulumi:"architecture"`
	// The creation timestamp of the image.
	Created pulumi.StringOutput `pulumi:"created"`
	// Optional description for the resulting image.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The disk size of the image in GB.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
	ImageCompression pulumi.StringPtrOutput `pulumi:"imageCompression"`
	// The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
	ImageFormat pulumi.StringPtrOutput `pulumi:"imageFormat"`
	// The ID of the created Hetzner Cloud image.
	ImageId pulumi.IntOutput `pulumi:"imageId"`
	// The name of the created image.
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// Optional size validation for the image in bytes.
	ImageSize pulumi.IntPtrOutput `pulumi:"imageSize"`
	// The URL to download the image from. Must be publicly accessible.
	ImageUrl pulumi.StringPtrOutput `pulumi:"imageUrl"`
	// Labels to add to the resulting image. These can be used to filter images later.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The OS flavor of the image.
	OsFlavor pulumi.StringOutput `pulumi:"osFlavor"`
	// The OS version of the image.
	OsVersion pulumi.StringOutput `pulumi:"osVersion"`
	// Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
	ServerType pulumi.StringPtrOutput `pulumi:"serverType"`
	// The current status of the image.
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of the image.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewUploadedImage registers a new resource with the given unique name, arguments, and options.
func NewUploadedImage(ctx *pulumi.Context,
	name string, args *UploadedImageArgs, opts ...pulumi.ResourceOption) (*UploadedImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Architecture == nil {
		return nil, errors.New("invalid value for required argument 'Architecture'")
	}
	if args.ImageCompression == nil {
		args.ImageCompression = pulumi.StringPtr("none")
	}
	if args.ImageFormat == nil {
		args.ImageFormat = pulumi.StringPtr("raw")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UploadedImage
	err := ctx.RegisterResource("hcloud-upload-image:hcloudimages:UploadedImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUploadedImage gets an existing UploadedImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUploadedImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UploadedImageState, opts ...pulumi.ResourceOption) (*UploadedImage, error) {
	var resource UploadedImage
	err := ctx.ReadResource("hcloud-upload-image:hcloudimages:UploadedImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UploadedImage resources.
type uploadedImageState struct {
}

type UploadedImageState struct {
}

func (UploadedImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*uploadedImageState)(nil)).Elem()
}

type uploadedImageArgs struct {
	// The architecture of the image. Supported: 'x86', 'arm'.
	Architecture string `pulumi:"architecture"`
	// Optional description for the resulting image.
	Description *string `pulumi:"description"`
	// The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
	ImageCompression *string `pulumi:"imageCompression"`
	// The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
	ImageFormat *string `pulumi:"imageFormat"`
	// Optional size validation for the image in bytes.
	ImageSize *int `pulumi:"imageSize"`
	// The URL to download the image from. Must be publicly accessible.
	ImageUrl *string `pulumi:"imageUrl"`
	// Labels to add to the resulting image. These can be used to filter images later.
	Labels map[string]string `pulumi:"labels"`
	// Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
	ServerType *string `pulumi:"serverType"`
}

// The set of arguments for constructing a UploadedImage resource.
type UploadedImageArgs struct {
	// The architecture of the image. Supported: 'x86', 'arm'.
	Architecture pulumi.StringInput
	// Optional description for the resulting image.
	Description pulumi.StringPtrInput
	// The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
	ImageCompression pulumi.StringPtrInput
	// The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
	ImageFormat pulumi.StringPtrInput
	// Optional size validation for the image in bytes.
	ImageSize pulumi.IntPtrInput
	// The URL to download the image from. Must be publicly accessible.
	ImageUrl pulumi.StringPtrInput
	// Labels to add to the resulting image. These can be used to filter images later.
	Labels pulumi.StringMapInput
	// Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
	ServerType pulumi.StringPtrInput
}

func (UploadedImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*uploadedImageArgs)(nil)).Elem()
}

type UploadedImageInput interface {
	pulumi.Input

	ToUploadedImageOutput() UploadedImageOutput
	ToUploadedImageOutputWithContext(ctx context.Context) UploadedImageOutput
}

func (*UploadedImage) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadedImage)(nil)).Elem()
}

func (i *UploadedImage) ToUploadedImageOutput() UploadedImageOutput {
	return i.ToUploadedImageOutputWithContext(context.Background())
}

func (i *UploadedImage) ToUploadedImageOutputWithContext(ctx context.Context) UploadedImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadedImageOutput)
}

// UploadedImageArrayInput is an input type that accepts UploadedImageArray and UploadedImageArrayOutput values.
// You can construct a concrete instance of `UploadedImageArrayInput` via:
//
//	UploadedImageArray{ UploadedImageArgs{...} }
type UploadedImageArrayInput interface {
	pulumi.Input

	ToUploadedImageArrayOutput() UploadedImageArrayOutput
	ToUploadedImageArrayOutputWithContext(context.Context) UploadedImageArrayOutput
}

type UploadedImageArray []UploadedImageInput

func (UploadedImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UploadedImage)(nil)).Elem()
}

func (i UploadedImageArray) ToUploadedImageArrayOutput() UploadedImageArrayOutput {
	return i.ToUploadedImageArrayOutputWithContext(context.Background())
}

func (i UploadedImageArray) ToUploadedImageArrayOutputWithContext(ctx context.Context) UploadedImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadedImageArrayOutput)
}

// UploadedImageMapInput is an input type that accepts UploadedImageMap and UploadedImageMapOutput values.
// You can construct a concrete instance of `UploadedImageMapInput` via:
//
//	UploadedImageMap{ "key": UploadedImageArgs{...} }
type UploadedImageMapInput interface {
	pulumi.Input

	ToUploadedImageMapOutput() UploadedImageMapOutput
	ToUploadedImageMapOutputWithContext(context.Context) UploadedImageMapOutput
}

type UploadedImageMap map[string]UploadedImageInput

func (UploadedImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UploadedImage)(nil)).Elem()
}

func (i UploadedImageMap) ToUploadedImageMapOutput() UploadedImageMapOutput {
	return i.ToUploadedImageMapOutputWithContext(context.Background())
}

func (i UploadedImageMap) ToUploadedImageMapOutputWithContext(ctx context.Context) UploadedImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UploadedImageMapOutput)
}

type UploadedImageOutput struct{ *pulumi.OutputState }

func (UploadedImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UploadedImage)(nil)).Elem()
}

func (o UploadedImageOutput) ToUploadedImageOutput() UploadedImageOutput {
	return o
}

func (o UploadedImageOutput) ToUploadedImageOutputWithContext(ctx context.Context) UploadedImageOutput {
	return o
}

// The architecture of the image. Supported: 'x86', 'arm'.
func (o UploadedImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// The creation timestamp of the image.
func (o UploadedImageOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Optional description for the resulting image.
func (o UploadedImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The disk size of the image in GB.
func (o UploadedImageOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
func (o UploadedImageOutput) ImageCompression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringPtrOutput { return v.ImageCompression }).(pulumi.StringPtrOutput)
}

// The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
func (o UploadedImageOutput) ImageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringPtrOutput { return v.ImageFormat }).(pulumi.StringPtrOutput)
}

// The ID of the created Hetzner Cloud image.
func (o UploadedImageOutput) ImageId() pulumi.IntOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.IntOutput { return v.ImageId }).(pulumi.IntOutput)
}

// The name of the created image.
func (o UploadedImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// Optional size validation for the image in bytes.
func (o UploadedImageOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.IntPtrOutput { return v.ImageSize }).(pulumi.IntPtrOutput)
}

// The URL to download the image from. Must be publicly accessible.
func (o UploadedImageOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringPtrOutput { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// Labels to add to the resulting image. These can be used to filter images later.
func (o UploadedImageOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The OS flavor of the image.
func (o UploadedImageOutput) OsFlavor() pulumi.StringOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringOutput { return v.OsFlavor }).(pulumi.StringOutput)
}

// The OS version of the image.
func (o UploadedImageOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringOutput { return v.OsVersion }).(pulumi.StringOutput)
}

// Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
func (o UploadedImageOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringPtrOutput { return v.ServerType }).(pulumi.StringPtrOutput)
}

// The current status of the image.
func (o UploadedImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of the image.
func (o UploadedImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UploadedImage) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type UploadedImageArrayOutput struct{ *pulumi.OutputState }

func (UploadedImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UploadedImage)(nil)).Elem()
}

func (o UploadedImageArrayOutput) ToUploadedImageArrayOutput() UploadedImageArrayOutput {
	return o
}

func (o UploadedImageArrayOutput) ToUploadedImageArrayOutputWithContext(ctx context.Context) UploadedImageArrayOutput {
	return o
}

func (o UploadedImageArrayOutput) Index(i pulumi.IntInput) UploadedImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UploadedImage {
		return vs[0].([]*UploadedImage)[vs[1].(int)]
	}).(UploadedImageOutput)
}

type UploadedImageMapOutput struct{ *pulumi.OutputState }

func (UploadedImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UploadedImage)(nil)).Elem()
}

func (o UploadedImageMapOutput) ToUploadedImageMapOutput() UploadedImageMapOutput {
	return o
}

func (o UploadedImageMapOutput) ToUploadedImageMapOutputWithContext(ctx context.Context) UploadedImageMapOutput {
	return o
}

func (o UploadedImageMapOutput) MapIndex(k pulumi.StringInput) UploadedImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UploadedImage {
		return vs[0].(map[string]*UploadedImage)[vs[1].(string)]
	}).(UploadedImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UploadedImageInput)(nil)).Elem(), &UploadedImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadedImageArrayInput)(nil)).Elem(), UploadedImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UploadedImageMapInput)(nil)).Elem(), UploadedImageMap{})
	pulumi.RegisterOutputType(UploadedImageOutput{})
	pulumi.RegisterOutputType(UploadedImageArrayOutput{})
	pulumi.RegisterOutputType(UploadedImageMapOutput{})
}
