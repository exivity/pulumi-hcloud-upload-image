# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['UploadedImageArgs', 'UploadedImage']

@pulumi.input_type
class UploadedImageArgs:
    def __init__(__self__, *,
                 architecture: pulumi.Input[_builtins.str],
                 hcloud_token: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 image_compression: Optional[pulumi.Input[_builtins.str]] = None,
                 image_format: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 server_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a UploadedImage resource.
        :param pulumi.Input[_builtins.str] architecture: The architecture of the image. Supported: 'x86', 'arm'.
        :param pulumi.Input[_builtins.str] hcloud_token: The Hetzner Cloud API token.
        :param pulumi.Input[_builtins.str] description: Optional description for the resulting image.
        :param pulumi.Input[_builtins.str] image_compression: The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
        :param pulumi.Input[_builtins.str] image_format: The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
        :param pulumi.Input[_builtins.int] image_size: Optional size validation for the image in bytes.
        :param pulumi.Input[_builtins.str] image_url: The URL to download the image from. Must be publicly accessible.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels to add to the resulting image. These can be used to filter images later.
        :param pulumi.Input[_builtins.str] server_type: Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "hcloud_token", hcloud_token)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image_compression is None:
            image_compression = 'none'
        if image_compression is not None:
            pulumi.set(__self__, "image_compression", image_compression)
        if image_format is None:
            image_format = 'raw'
        if image_format is not None:
            pulumi.set(__self__, "image_format", image_format)
        if image_size is not None:
            pulumi.set(__self__, "image_size", image_size)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> pulumi.Input[_builtins.str]:
        """
        The architecture of the image. Supported: 'x86', 'arm'.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter(name="hcloudToken")
    def hcloud_token(self) -> pulumi.Input[_builtins.str]:
        """
        The Hetzner Cloud API token.
        """
        return pulumi.get(self, "hcloud_token")

    @hcloud_token.setter
    def hcloud_token(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hcloud_token", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional description for the resulting image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
        """
        return pulumi.get(self, "image_compression")

    @image_compression.setter
    def image_compression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_compression", value)

    @_builtins.property
    @pulumi.getter(name="imageFormat")
    def image_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
        """
        return pulumi.get(self, "image_format")

    @image_format.setter
    def image_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_format", value)

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Optional size validation for the image in bytes.
        """
        return pulumi.get(self, "image_size")

    @image_size.setter
    def image_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "image_size", value)

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL to download the image from. Must be publicly accessible.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_url", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels to add to the resulting image. These can be used to filter images later.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_type", value)


@pulumi.type_token("hcloud-upload-image:hcloudimages:UploadedImage")
class UploadedImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hcloud_token: Optional[pulumi.Input[_builtins.str]] = None,
                 image_compression: Optional[pulumi.Input[_builtins.str]] = None,
                 image_format: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 server_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Uploads a custom disk image to Hetzner Cloud and creates a snapshot that can be used to create servers.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] architecture: The architecture of the image. Supported: 'x86', 'arm'.
        :param pulumi.Input[_builtins.str] description: Optional description for the resulting image.
        :param pulumi.Input[_builtins.str] hcloud_token: The Hetzner Cloud API token.
        :param pulumi.Input[_builtins.str] image_compression: The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
        :param pulumi.Input[_builtins.str] image_format: The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
        :param pulumi.Input[_builtins.int] image_size: Optional size validation for the image in bytes.
        :param pulumi.Input[_builtins.str] image_url: The URL to download the image from. Must be publicly accessible.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels to add to the resulting image. These can be used to filter images later.
        :param pulumi.Input[_builtins.str] server_type: Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UploadedImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Uploads a custom disk image to Hetzner Cloud and creates a snapshot that can be used to create servers.

        :param str resource_name: The name of the resource.
        :param UploadedImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UploadedImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hcloud_token: Optional[pulumi.Input[_builtins.str]] = None,
                 image_compression: Optional[pulumi.Input[_builtins.str]] = None,
                 image_format: Optional[pulumi.Input[_builtins.str]] = None,
                 image_size: Optional[pulumi.Input[_builtins.int]] = None,
                 image_url: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 server_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UploadedImageArgs.__new__(UploadedImageArgs)

            if architecture is None and not opts.urn:
                raise TypeError("Missing required property 'architecture'")
            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["description"] = description
            if hcloud_token is None and not opts.urn:
                raise TypeError("Missing required property 'hcloud_token'")
            __props__.__dict__["hcloud_token"] = None if hcloud_token is None else pulumi.Output.secret(hcloud_token)
            if image_compression is None:
                image_compression = 'none'
            __props__.__dict__["image_compression"] = image_compression
            if image_format is None:
                image_format = 'raw'
            __props__.__dict__["image_format"] = image_format
            __props__.__dict__["image_size"] = image_size
            __props__.__dict__["image_url"] = image_url
            __props__.__dict__["labels"] = labels
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["created"] = None
            __props__.__dict__["disk_size"] = None
            __props__.__dict__["image_id"] = None
            __props__.__dict__["image_name"] = None
            __props__.__dict__["os_flavor"] = None
            __props__.__dict__["os_version"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["hcloudToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(UploadedImage, __self__).__init__(
            'hcloud-upload-image:hcloudimages:UploadedImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'UploadedImage':
        """
        Get an existing UploadedImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = UploadedImageArgs.__new__(UploadedImageArgs)

        __props__.__dict__["architecture"] = None
        __props__.__dict__["created"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["disk_size"] = None
        __props__.__dict__["hcloud_token"] = None
        __props__.__dict__["image_compression"] = None
        __props__.__dict__["image_format"] = None
        __props__.__dict__["image_id"] = None
        __props__.__dict__["image_name"] = None
        __props__.__dict__["image_size"] = None
        __props__.__dict__["image_url"] = None
        __props__.__dict__["labels"] = None
        __props__.__dict__["os_flavor"] = None
        __props__.__dict__["os_version"] = None
        __props__.__dict__["server_type"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["type"] = None
        return UploadedImage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[_builtins.str]:
        """
        The architecture of the image. Supported: 'x86', 'arm'.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        The creation timestamp of the image.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional description for the resulting image.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[_builtins.int]:
        """
        The disk size of the image in GB.
        """
        return pulumi.get(self, "disk_size")

    @_builtins.property
    @pulumi.getter(name="hcloudToken")
    def hcloud_token(self) -> pulumi.Output[_builtins.str]:
        """
        The Hetzner Cloud API token.
        """
        return pulumi.get(self, "hcloud_token")

    @_builtins.property
    @pulumi.getter(name="imageCompression")
    def image_compression(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
        """
        return pulumi.get(self, "image_compression")

    @_builtins.property
    @pulumi.getter(name="imageFormat")
    def image_format(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
        """
        return pulumi.get(self, "image_format")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.int]:
        """
        The ID of the created Hetzner Cloud image.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the created image.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Optional size validation for the image in bytes.
        """
        return pulumi.get(self, "image_size")

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The URL to download the image from. Must be publicly accessible.
        """
        return pulumi.get(self, "image_url")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels to add to the resulting image. These can be used to filter images later.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="osFlavor")
    def os_flavor(self) -> pulumi.Output[_builtins.str]:
        """
        The OS flavor of the image.
        """
        return pulumi.get(self, "os_flavor")

    @_builtins.property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Output[_builtins.str]:
        """
        The OS version of the image.
        """
        return pulumi.get(self, "os_version")

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
        """
        return pulumi.get(self, "server_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the image.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the image.
        """
        return pulumi.get(self, "type")

