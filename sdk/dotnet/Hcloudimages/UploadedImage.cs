// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Yournamespace.HcloudUploadImage.Hcloudimages
{
    /// <summary>
    /// Uploads a custom disk image to Hetzner Cloud and creates a snapshot that can be used to create servers.
    /// </summary>
    [HcloudUploadImageResourceType("hcloud-upload-image:hcloudimages:UploadedImage")]
    public partial class UploadedImage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The architecture of the image. Supported: 'x86', 'arm'.
        /// </summary>
        [Output("architecture")]
        public Output<string> Architecture { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp of the image.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Optional description for the resulting image.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The disk size of the image in GB.
        /// </summary>
        [Output("diskSize")]
        public Output<int> DiskSize { get; private set; } = null!;

        /// <summary>
        /// The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
        /// </summary>
        [Output("imageCompression")]
        public Output<string?> ImageCompression { get; private set; } = null!;

        /// <summary>
        /// The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
        /// </summary>
        [Output("imageFormat")]
        public Output<string?> ImageFormat { get; private set; } = null!;

        /// <summary>
        /// The ID of the created Hetzner Cloud image.
        /// </summary>
        [Output("imageId")]
        public Output<int> ImageId { get; private set; } = null!;

        /// <summary>
        /// The name of the created image.
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// Optional size validation for the image in bytes.
        /// </summary>
        [Output("imageSize")]
        public Output<int?> ImageSize { get; private set; } = null!;

        /// <summary>
        /// The URL to download the image from. Must be publicly accessible.
        /// </summary>
        [Output("imageUrl")]
        public Output<string?> ImageUrl { get; private set; } = null!;

        /// <summary>
        /// Labels to add to the resulting image. These can be used to filter images later.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The OS flavor of the image.
        /// </summary>
        [Output("osFlavor")]
        public Output<string> OsFlavor { get; private set; } = null!;

        /// <summary>
        /// The OS version of the image.
        /// </summary>
        [Output("osVersion")]
        public Output<string> OsVersion { get; private set; } = null!;

        /// <summary>
        /// Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
        /// </summary>
        [Output("serverType")]
        public Output<string?> ServerType { get; private set; } = null!;

        /// <summary>
        /// The current status of the image.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The type of the image.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a UploadedImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UploadedImage(string name, UploadedImageArgs args, CustomResourceOptions? options = null)
            : base("hcloud-upload-image:hcloudimages:UploadedImage", name, args ?? new UploadedImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UploadedImage(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("hcloud-upload-image:hcloudimages:UploadedImage", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UploadedImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UploadedImage Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new UploadedImage(name, id, options);
        }
    }

    public sealed class UploadedImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The architecture of the image. Supported: 'x86', 'arm'.
        /// </summary>
        [Input("architecture", required: true)]
        public Input<string> Architecture { get; set; } = null!;

        /// <summary>
        /// Optional description for the resulting image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
        /// </summary>
        [Input("imageCompression")]
        public Input<string>? ImageCompression { get; set; }

        /// <summary>
        /// The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
        /// </summary>
        [Input("imageFormat")]
        public Input<string>? ImageFormat { get; set; }

        /// <summary>
        /// Optional size validation for the image in bytes.
        /// </summary>
        [Input("imageSize")]
        public Input<int>? ImageSize { get; set; }

        /// <summary>
        /// The URL to download the image from. Must be publicly accessible.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to add to the resulting image. These can be used to filter images later.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
        /// </summary>
        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        public UploadedImageArgs()
        {
            ImageCompression = "none";
            ImageFormat = "raw";
        }
        public static new UploadedImageArgs Empty => new UploadedImageArgs();
    }
}
