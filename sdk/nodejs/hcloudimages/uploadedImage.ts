// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Uploads a custom disk image to Hetzner Cloud and creates a snapshot that can be used to create servers.
 */
export class UploadedImage extends pulumi.CustomResource {
    /**
     * Get an existing UploadedImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): UploadedImage {
        return new UploadedImage(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcloud-upload-image:hcloudimages:UploadedImage';

    /**
     * Returns true if the given object is an instance of UploadedImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UploadedImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UploadedImage.__pulumiType;
    }

    /**
     * The architecture of the image. Supported: 'x86', 'arm'.
     */
    public readonly architecture!: pulumi.Output<string>;
    /**
     * The creation timestamp of the image.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Optional description for the resulting image.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The disk size of the image in GB.
     */
    public /*out*/ readonly diskSize!: pulumi.Output<number>;
    /**
     * The Hetzner Cloud API token.
     */
    public readonly hcloudToken!: pulumi.Output<string>;
    /**
     * The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
     */
    public readonly imageCompression!: pulumi.Output<string | undefined>;
    /**
     * The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
     */
    public readonly imageFormat!: pulumi.Output<string | undefined>;
    /**
     * The ID of the created Hetzner Cloud image.
     */
    public /*out*/ readonly imageId!: pulumi.Output<number>;
    /**
     * The name of the created image.
     */
    public /*out*/ readonly imageName!: pulumi.Output<string>;
    /**
     * Optional size validation for the image in bytes.
     */
    public readonly imageSize!: pulumi.Output<number | undefined>;
    /**
     * The URL to download the image from. Must be publicly accessible.
     */
    public readonly imageUrl!: pulumi.Output<string | undefined>;
    /**
     * Labels to add to the resulting image. These can be used to filter images later.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The OS flavor of the image.
     */
    public /*out*/ readonly osFlavor!: pulumi.Output<string>;
    /**
     * The OS version of the image.
     */
    public /*out*/ readonly osVersion!: pulumi.Output<string>;
    /**
     * Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
     */
    public readonly serverType!: pulumi.Output<string | undefined>;
    /**
     * The current status of the image.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The type of the image.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a UploadedImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UploadedImageArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.architecture === undefined) && !opts.urn) {
                throw new Error("Missing required property 'architecture'");
            }
            if ((!args || args.hcloudToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hcloudToken'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hcloudToken"] = args?.hcloudToken ? pulumi.secret(args.hcloudToken) : undefined;
            resourceInputs["imageCompression"] = (args ? args.imageCompression : undefined) ?? "none";
            resourceInputs["imageFormat"] = (args ? args.imageFormat : undefined) ?? "raw";
            resourceInputs["imageSize"] = args ? args.imageSize : undefined;
            resourceInputs["imageUrl"] = args ? args.imageUrl : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["diskSize"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["osFlavor"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        } else {
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["diskSize"] = undefined /*out*/;
            resourceInputs["hcloudToken"] = undefined /*out*/;
            resourceInputs["imageCompression"] = undefined /*out*/;
            resourceInputs["imageFormat"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["imageSize"] = undefined /*out*/;
            resourceInputs["imageUrl"] = undefined /*out*/;
            resourceInputs["labels"] = undefined /*out*/;
            resourceInputs["osFlavor"] = undefined /*out*/;
            resourceInputs["osVersion"] = undefined /*out*/;
            resourceInputs["serverType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["hcloudToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UploadedImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a UploadedImage resource.
 */
export interface UploadedImageArgs {
    /**
     * The architecture of the image. Supported: 'x86', 'arm'.
     */
    architecture: pulumi.Input<string>;
    /**
     * Optional description for the resulting image.
     */
    description?: pulumi.Input<string>;
    /**
     * The Hetzner Cloud API token.
     */
    hcloudToken: pulumi.Input<string>;
    /**
     * The compression format of the image. Supported: 'none', 'bz2', 'xz'. Defaults to 'none'.
     */
    imageCompression?: pulumi.Input<string>;
    /**
     * The format of the image. Supported: 'raw', 'qcow2'. Defaults to 'raw'.
     */
    imageFormat?: pulumi.Input<string>;
    /**
     * Optional size validation for the image in bytes.
     */
    imageSize?: pulumi.Input<number>;
    /**
     * The URL to download the image from. Must be publicly accessible.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * Labels to add to the resulting image. These can be used to filter images later.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional server type to use for the temporary server. If not specified, a default will be chosen based on architecture.
     */
    serverType?: pulumi.Input<string>;
}
